class Task {
    private String taskId;
    private String taskName;
    private String status;

    public Task(String taskId, String taskName, String status) {
        this.taskId = taskId;
        this.taskName = taskName;
        this.status = status;
    }

    // Getters
    public String getTaskId() {
        return taskId;
    }

    public String getTaskName() {
        return taskName;
    }

    public String getStatus() {
        return status;
    }

    @Override
    public String toString() {
        return "Task [taskId=" + taskId + ", taskName=" + taskName + ", status=" + status + "]";
    }
}

class Node {
    Task task;
    Node next;

    public Node(Task task) {
        this.task = task;
        this.next = null;
    }
}

class TaskManager {
    private Node head;
    private int size;

    public TaskManager() {
        head = null;
        size = 0;
    }

    // Add Task
    public void addTask(Task task) {
        Node newNode = new Node(task);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    // Search Task by ID
    public Task searchTaskById(String taskId) {
        Node current = head;
        while (current != null) {
            if (current.task.getTaskId().equals(taskId)) {
                return current.task;
            }
            current = current.next;
        }
        return null; // Task not found
    }

    // Traversing and Display Tasks
    public void traverseTasks() {
        Node current = head;
        while (current != null) {
            System.out.println(current.task);
            current = current.next;
        }
    }

    // Deleting Task by ID
    public void deleteTaskById(String taskId) {
        Node current = head;
        Node previous = null;
        while (current != null) {
            if (current.task.getTaskId().equals(taskId)) {
                if (previous == null) {
                    head = current.next;
                } else {
                    previous.next = current.next;
                }
                size--;
                return;
            }
            previous = current;
            current = current.next;
        }
        System.out.println("Task not found.");
    }

    public int getSize() {
        return size;
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        TaskManager taskManager = new TaskManager();

        // Adding tasks
        taskManager.addTask(new Task("T001", "Task 1", "Pending"));
        taskManager.addTask(new Task("T002", "Task 2", "In Progress"));
        taskManager.addTask(new Task("T003", "Task 3", "Completed"));

        // Displaying all tasks
        System.out.println("All Tasks:");
        taskManager.traverseTasks();

        // Searching for a task
        Task task = taskManager.searchTaskById("T002");
        if (task != null) {
            System.out.println("Task Found: " + task);
        } else {
            System.out.println("Task not found.");
        }

        // Deleting a task
        taskManager.deleteTaskById("T003");
        System.out.println("After Deletion:");
        taskManager.traverseTasks();
    }
}
